//for all helper classes
@mixin helperClass($list, $class, $property) {
    @each $item in $list {
        @if $class== "" {
            .#{$item} {
                #{$property}: #{$item};
            }
        } @else {
            .#{$class}-#{$item} {
                #{$property}: #{$item};
            }
        }
    }
}

//spacing mixin
$spacing-xs: 2px;
$spacing-s: 4px;
$spacing-m: 8px; //base
$spacing-l: 16px;
$spacing-xl: 32px;
$spacing-xxl: 64px;
$spacing: (none: 0, xs: $spacing-xs, s: $spacing-s, m: $spacing-m, l: var(--spacing-l), xl: $spacing-xl);
@mixin spacing($attribute: "margin", $prefix: "-") {
    @each $name, $value in $spacing {
        &#{$prefix}#{$name} {
            #{$attribute}: $value;
        }
    }

    $newattribute: $attribute + "-top";
    @each $name, $value in $spacing {
        &t#{$prefix}#{$name} {
            #{$newattribute}: $value;
        }
    }

    $newattribute: $attribute + "-right";
    @each $name, $value in $spacing {
        &r#{$prefix}#{$name} {
            #{$newattribute}: $value;
        }
    }

    $newattribute: $attribute + "-bottom";
    @each $name, $value in $spacing {
        &b#{$prefix}#{$name} {
            #{$newattribute}: $value;
        }
    }

    $newattribute: $attribute + "-left";
    @each $name, $value in $spacing {
        &l#{$prefix}#{$name} {
            #{$newattribute}: $value;
        }
    }
}

@mixin selectStyle() {
    font-weight: weight(regular);
    font-size: var(--base-font-size);
    letter-spacing: var(--form-letter-spacing);
    outline: none;
    appearance: none;
    display: inline-flex;
    max-width: var(--paragraph-max-width, 600px);
    height: var(--focusable-height-standard, 44px);
    padding: var(--spacing-m) var(--spacing-xxl) var(--spacing-m) var(--spacing-l);
    position: relative;
    color: var(--form-font-color);
    background-color: var(--form-background-color);
    border: var(--form-border-thickness) var(--form-border-style) var(--form-border-color);
    border-radius: var(--form-border-radius);

    cursor: pointer;
    transition: background-color 300ms cubic-bezier(0.2, 0, 0.38, 0.9), outline 300ms cubic-bezier(0.2, 0, 0.38, 0.9);

    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 448 512'%3E%3Cpath d='M443.5 162.6l-7.1-7.1c-4.7-4.7-12.3-4.7-17 0L224 351 28.5 155.5c-4.7-4.7-12.3-4.7-17 0l-7.1 7.1c-4.7 4.7-4.7 12.3 0 17l211 211.1c4.7 4.7 12.3 4.7 17 0l211-211.1c4.8-4.7 4.8-12.3.1-17z'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: 93% 50%;
    background-size: 14px;

    &::placeholder {
        color: var(--form-placeholder-color);
        font-style: var(--form-placeholder-font-style);
    }

    &:hover {
        border-color: var(--form-hover-border-color);
        
        &::placeholder {
            color: var(--form-hover-placeholder-color);
        }
    }

    &:focus {
        box-shadow: 0 0 0 1px var(--form-focus-border-color);
        background-color: var(--form-focus-background-color);
        
        &::placeholder {
            color: var(--form-focus-placeholder-color);
        }
    }

    @include formInputStates();
    @include disabledStyle();
}

//breakpoint mixin
//! if mobile first approach is used, mobile-only mixin should not be needed
//TODO: get breakpoints for each breakpoint
@mixin mobile-only {
    @media (max-width: 599px) {
        @content;
    }
}

@mixin tablet-portrait-up {
    @media (min-width: 600px) {
        @content;
    }
}

@mixin tablet-landscape-up {
    @media (min-width: 900px) {
        @content;
    }
}

@mixin desktop-up {
    @media (min-width: 1200px) {
        @content;
    }
}